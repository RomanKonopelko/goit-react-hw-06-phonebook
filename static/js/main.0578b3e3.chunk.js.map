{"version":3,"sources":["form.module.css","Components/Form.jsx","Components/Contact.jsx","redux/contacts/contacts-actions.js","Components/Filter.jsx","Components/Container.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","Form","state","name","number","phonenumber","input","match","nameInputId","randomID","numberInputId","reset","setState","handleChange","e","currentTarget","value","isNaN","length","handleSubmit","preventDefault","alert","props","onSubmit","className","s","form","this","htmlFor","label","type","id","onChange","placeholder","button","Component","Contact","onDeleteContact","onClick","addContact","createAction","deleteContact","getFilter","connect","console","log","contactsApp","contacts","filter","normalizeFilter","toLowerCase","filteredContacts","contact","includes","dispatch","actions","map","Container","title","children","App","form__container","list__container","contactsData","data","filterReducer","createReducer","_","payload","contactsReducer","newContact","contactsAppReducer","combineReducers","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.0578b3e3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__container\":\"form_form__container__38nKO\",\"list__container\":\"form_list__container__3bldd\",\"form\":\"form_form__15gzb\",\"input\":\"form_input__2PoGv\",\"label\":\"form_label__dP37N\",\"button\":\"form_button__VbJWj\"};","import { Component } from 'react'\r\nimport { v4 as randomID } from 'uuid';\r\nimport s from '../form.module.css'\r\n\r\nexport default class Form extends Component {\r\n    state = {\r\n        name: '',\r\n        number: ''\r\n    }\r\n\r\n    phonenumber = (input) => {\r\n        const phoneRegex = /^\\d{10}$/;\r\n        return input.match(phoneRegex) ? true : false\r\n    }\r\n    nameInputId = randomID();\r\n    numberInputId = randomID();\r\n\r\n    reset = () => {\r\n        this.setState({\r\n            name: '',\r\n            number: '',\r\n        });\r\n    };\r\n\r\n    handleChange = e => {\r\n        const { value, name } = e.currentTarget;\r\n        if (name === 'number') {\r\n            if (isNaN(value)) {\r\n                return\r\n            }\r\n        }\r\n        if (name === 'name') {\r\n            const letters = /^[a-zA-Z ]+(?:\\s[a-zA-Z]+)?$/\r\n            if (!value.match(letters) && value.length > 0) {\r\n                return\r\n            }\r\n        }\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if (this.state.name.length === 0) {\r\n            return alert('Write your name')\r\n\r\n        }\r\n        if (!this.phonenumber(this.state.number)) {\r\n            return alert('An invalid number')\r\n        }\r\n        this.props.onSubmit(this.state)\r\n        this.reset();\r\n    }\r\n\r\n\r\n    render() {\r\n        return <form className={s.form} onSubmit={this.handleSubmit}>\r\n            <label htmlFor={this.nameInputId} className={s.label}>Name</label>\r\n            <input\r\n                type=\"text\"\r\n                id={this.nameInputId}\r\n                className={s.input}\r\n                name=\"name\"\r\n                value={this.state.name}\r\n                onChange={this.handleChange}\r\n                placeholder='your name'\r\n            />\r\n            <br />\r\n            <label htmlFor={this.numberInputId} className={s.label}>Number</label>\r\n            <input\r\n                type=\"text\"\r\n                id={this.numberInputId}\r\n                className={s.input}\r\n                name=\"number\"\r\n                value={this.state.number}\r\n                onChange={this.handleChange}\r\n                placeholder=\"1234567890\"\r\n            />\r\n            <br />\r\n            <button type=\"submit\" className={s.button}>Add contact</button>\r\n        </form>\r\n    }\r\n}","export default function Contact({ id, name, number, onDeleteContact, s }) {\r\n    return (<li className=\"contact\" key={id}>\r\n        {name} {number}\r\n        <button\r\n            type=\"button\"\r\n            onClick={onDeleteContact}\r\n            className={s.button}>\r\n            delete\r\n                </button>\r\n    </li>)\r\n}","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addContact = createAction('app/addContact');\r\nexport const deleteContact = createAction('app/deleteContact');\r\nexport const getFilter = createAction('app/getFilter');\r\n","import s from '../form.module.css'\r\nimport Contact from './Contact'\r\nimport { v4 as randomID } from 'uuid';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../redux/contacts/contacts-actions'\r\n\r\nconst Filter = ({ getFilter, onDeleteContact, filteredContacts }) => {\r\n    console.log(filteredContacts, 'f');\r\n\r\n    return (<>\r\n        <label htmlFor=\"filter\">Search contact by number or name</label>\r\n        <br />\r\n        <input\r\n            type=\"text\"\r\n            name=\"filter\"\r\n            id=\"filter\"\r\n            onChange={(e) => getFilter(e.currentTarget.value)} />\r\n        <ul className={s.form}>\r\n            {filteredContacts.map(({ id, name, number }) => {\r\n                return <Contact key={randomID()} id={id} name={name} number={number} onDeleteContact={() => {\r\n                    onDeleteContact(id)\r\n                }} s={s} />\r\n            })}\r\n        </ul>\r\n    </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    console.log(state.contactsApp);\r\n    const { contacts, filter } = state.contactsApp\r\n    console.log(filter);\r\n    const normalizeFilter = filter.toLowerCase();\r\n    const filteredContacts = contacts.filter(contact =>\r\n        contact.name.toLowerCase().includes(normalizeFilter) || contact.number.includes(filter),\r\n    );\r\n    return { filteredContacts, }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onDeleteContact: id => dispatch(actions.deleteContact(id)),\r\n        getFilter: value => dispatch(actions.getFilter(value)),\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","export default function Container({ className, title, children }) {\r\n    return <div className={className}><h2>{title}</h2>{children}</div>\r\n}","import { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport Form from './Components/Form';\r\nimport Filter from './Components/Filter';\r\nimport * as actions from './redux/contacts/contacts-actions';\r\nimport Container from './Components/Container';\r\nimport s from './form.module.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Container className={s.form__container} title=\"Phonebook\">\r\n        <Form onSubmit={this.props.onSubmit} />\r\n\r\n        <Container className={s.list__container} title=\"Contacts\">\r\n          <Filter />\r\n        </Container>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contactsData: state.contactsApp.contacts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSubmit: data => dispatch(actions.addContact(data)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { v4 as randomID } from 'uuid';\r\nimport * as actions from './contacts-actions';\r\nconst filterReducer = createReducer('', {\r\n  [actions.getFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst contactsReducer = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => {\r\n    const newContact = {\r\n      id: randomID(),\r\n      name: payload.name,\r\n      number: payload.number,\r\n    };\r\n    const existedContact = state.filter(\r\n      contact => contact.name === newContact.name || contact.number === newContact.number,\r\n    );\r\n    if (existedContact.length === 0) {\r\n      return [...state, { ...newContact }];\r\n    } else {\r\n      alert('this contact or number already exist');\r\n      return state;\r\n    }\r\n  },\r\n  [actions.deleteContact]: (state, { payload }) => state.filter(({ id }) => payload !== id),\r\n});\r\n\r\nconst contactsAppReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nexport default contactsAppReducer;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsAppReducer from './contacts/contacts-reducer';\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contactsApp: persistReducer(persistConfig, contactsAppReducer),\r\n  },\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/es/integration/react';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <PersistGate loading={null} persistor={store.persistor}>\r\n      <Provider store={store.store}>\r\n        <App />\r\n      </Provider>\r\n    </PersistGate>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}